class PitchGenerator {
    constructor() {
        this.apiKey = 'AIzaSyAAuHtqOKZVbRjy2GZh4IBNVDsYQhMb8B8';
        this.currentPitch = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkApiKey();
        this.setupInputValidation();
    }

    setupInputValidation() {
        const inputs = ['projectIdea', 'targetMarket', 'businessModel', 'competition'];
        
        inputs.forEach(inputId => {
            const input = document.getElementById(inputId);
            
            // Ajouter un message d'erreur sous chaque input
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message-input';
            errorDiv.style.color = 'red';
            errorDiv.style.fontSize = '0.8em';
            errorDiv.style.marginTop = '5px';
            errorDiv.style.display = 'none';
            input.parentNode.insertBefore(errorDiv, input.nextSibling);

            // Validation en temps r√©el pendant la saisie
            input.addEventListener('input', (e) => {
                this.validateInput(e.target);
            });

            // Validation au focus out
            input.addEventListener('blur', (e) => {
                this.validateInput(e.target);
            });
        });
    }

    validateInput(input) {
        const value = input.value;
        const errorDiv = input.nextElementSibling;
        const specialCharsRegex = /[!@#$%^&*()_+\-=\[\]{};:"\\|<>/?]+/;
        const numbersRegex = /\d/;
        
        // R√©initialiser les styles
        input.style.borderColor = '';
        errorDiv.style.display = 'none';
        errorDiv.textContent = '';

        // V√©rifications
        if (value.trim() === '') {
            this.showInputError(input, errorDiv, 'Ce champ ne peut pas √™tre vide');
            return false;
        }

        if (numbersRegex.test(value)) {
            this.showInputError(input, errorDiv, 'Les chiffres ne sont pas autoris√©s dans ce champ');
            return false;
        }

        if (specialCharsRegex.test(value)) {
            this.showInputError(input, errorDiv, 'Les caract√®res sp√©ciaux ne sont pas autoris√©s');
            return false;
        }

        if (value.length < 10) {
            this.showInputError(input, errorDiv, 'Le texte doit contenir au moins 10 caract√®res');
            return false;
        }

        return true;
    }

    showInputError(input, errorDiv, message) {
        input.style.borderColor = 'red';
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }

    validateForm(formData) {
        const requiredFields = ['projectIdea', 'targetMarket', 'businessModel', 'competition'];
        let isValid = true;

        for (const field of requiredFields) {
            const input = document.getElementById(field);
            if (!this.validateInput(input)) {
                isValid = false;
            }
        }

        if (!isValid) {
            return false;
        }

        // Validation suppl√©mentaire des longueurs minimales
        const minLengths = {
            projectIdea: 20,
            targetMarket: 10,
            businessModel: 10,
            competition: 20
        };

        for (const [field, minLength] of Object.entries(minLengths)) {
            if (formData[field].length < minLength) {
                const input = document.getElementById(field);
                const errorDiv = input.nextElementSibling;
                this.showInputError(
                    input,
                    errorDiv,
                    `Le texte doit contenir au moins ${minLength} caract√®res`
                );
                isValid = false;
            }
        }

        return isValid;
    }

    bindEvents() {
        // Formulaire principal
        document.getElementById('projectForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.generatePitch();
        });

        // Bouton de test
        document.getElementById('testBtn').addEventListener('click', () => {
            this.generateTestPitch();
        });

        // Boutons d'action
        document.getElementById('editBtn').addEventListener('click', () => this.editPitch());
        document.getElementById('shareBtn').addEventListener('click', () => this.sharePitch());
        document.getElementById('exportBtn').addEventListener('click', () => this.exportToPDF());

        // Modal API
        document.getElementById('saveApiKey').addEventListener('click', () => this.saveApiKey());
        document.getElementById('cancelApiKey').addEventListener('click', () => this.hideApiModal());
        
        // Fermer modal en cliquant √† l'ext√©rieur
        document.getElementById('apiModal').addEventListener('click', (e) => {
            if (e.target.id === 'apiModal') {
                this.hideApiModal();
            }
        });
    }

    checkApiKey() {
        this.apiKey = localStorage.getItem('gemini_api_key');
        if (!this.apiKey) {
            localStorage.setItem('gemini_api_key', 'AIzaSyAAuHtqOKZVbRjy2GZh4IBNVDsYQhMb8B8');
            this.apiKey = 'AIzaSyAAuHtqOKZVbRjy2GZh4IBNVDsYQhMb8B8';
        }
    }

    showApiModal() {
        document.getElementById('apiModal').classList.remove('hidden');
    }

    hideApiModal() {
        document.getElementById('apiModal').classList.add('hidden');
    }

    saveApiKey() {
        const apiKeyInput = document.getElementById('apiKeyInput');
        const apiKey = apiKeyInput.value.trim();
        
        if (!apiKey) {
            alert('Veuillez entrer une cl√© API valide');
            return;
        }
        
        this.apiKey = apiKey;
        localStorage.setItem('gemini_api_key', apiKey);
        apiKeyInput.value = '';
        this.hideApiModal();
    }

    async generatePitch() {
        console.log('üöÄ D√©but de la g√©n√©ration du pitch');
        
        if (!this.apiKey) {
            console.log('‚ùå Pas de cl√© API');
            this.showApiModal();
            return;
        }

        const formData = this.getFormData();
        console.log('üìù Donn√©es du formulaire:', formData);
        
        if (!this.validateForm(formData)) {
            console.log('‚ùå Validation du formulaire √©chou√©e');
            return;
        }

        this.showLoading(true);
        this.hideError();

        try {
            console.log('üîÑ Appel √† l\'API Gemini...');
            const pitch = await this.callGeminiAPI(formData);
            console.log('‚úÖ Pitch g√©n√©r√©:', pitch);
            this.displayPitch(pitch);
            this.currentPitch = pitch;
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
            this.showError(error.message);
        } finally {
            this.showLoading(false);
        }
    }

    getFormData() {
        return {
            projectIdea: document.getElementById('projectIdea').value.trim(),
            targetMarket: document.getElementById('targetMarket').value.trim(),
            businessModel: document.getElementById('businessModel').value.trim(),
            competition: document.getElementById('competition').value.trim()
        };
    }

    getFieldLabel(field) {
        const labels = {
            projectIdea: 'Id√©e de projet',
            targetMarket: 'March√© cible',
            businessModel: 'Mod√®le √©conomique',
            competition: 'Diff√©renciation'
        };
        return labels[field] || field;
    }

    async callGeminiAPI(formData) {
        const prompt = this.buildPrompt(formData);
        console.log('üì§ Prompt envoy√©:', prompt.substring(0, 200) + '...');
        
        const requestBody = {
            contents: [
                {
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ]
        };
        
        console.log('üì° Requ√™te API:', requestBody);
        
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${this.apiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        console.log('üì° Statut de la r√©ponse:', response.status);

        if (!response.ok) {
            const errorData = await response.json();
            console.error('‚ùå Erreur API:', errorData);
            
            let errorMessage = 'Erreur API';
            if (response.status === 400) {
                errorMessage = 'Cl√© API invalide ou requ√™te malform√©e';
            } else if (response.status === 403) {
                errorMessage = 'Cl√© API invalide ou acc√®s refus√©';
            } else if (response.status === 429) {
                errorMessage = 'Limite de requ√™tes atteinte. Veuillez r√©essayer plus tard.';
            }
            
            throw new Error(`${errorMessage}: ${errorData.error?.message || 'Erreur inconnue'}`);
        }

        const data = await response.json();
        console.log('üì• R√©ponse API compl√®te:', data);
        
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
            console.error('‚ùå Structure de r√©ponse invalide:', data);
            throw new Error('R√©ponse API invalide - pas de contenu g√©n√©r√©');
        }

        const generatedText = data.candidates[0].content.parts[0].text;
        console.log('üìÑ Texte g√©n√©r√©:', generatedText);

        const parsedResponse = this.parsePitchResponse(generatedText);
        parsedResponse.raw_response = generatedText;
        return parsedResponse;
    }

    buildPrompt(formData) {
        return `Tu es un expert en business development et en pitch entrepreneurial. 
Bas√© sur les informations suivantes, g√©n√®re un pitch structur√© et professionnel selon la m√©thode Lean Canvas.

INFORMATIONS DU PROJET:
- Id√©e: ${formData.projectIdea}
- March√© cible: ${formData.targetMarket}  
- Mod√®le √©conomique: ${formData.businessModel}
- Diff√©renciation: ${formData.competition}

STRUCTURE DEMAND√âE (respecte exactement ce format):
## PROBL√àME
[D√©cris le probl√®me principal que r√©sout ce projet, en 2-3 phrases percutantes]

## SOLUTION
[Pr√©sente la solution de mani√®re claire et concise, en expliquant comment elle r√©sout le probl√®me]

## CLIENT CIBLE
[Define pr√©cis√©ment le segment de client√®le, leurs caract√©ristiques et besoins]

## PROPOSITION DE VALEUR
[Explique la valeur unique apport√©e et pourquoi choisir cette solution]

## CANAUX DE DISTRIBUTION
[Liste les principaux canaux pour atteindre et servir les clients]

## MOD√àLE √âCONOMIQUE
[D√©taille comment l'entreprise g√©n√®re ses revenus]

## AVANTAGE CONCURRENTIEL
[Explique ce qui diff√©rencie ce projet de la concurrence]

## M√âTRIQUES CL√âS
[Sugg√®re 3-4 indicateurs importants √† suivre]

Garde un ton professionnel mais accessible. Chaque section doit √™tre concise (2-3 phrases max) mais impactante.`;
    }

    parsePitchResponse(response) {
        console.log('üîç Parsing de la r√©ponse:', response);
        
        const sections = {};
        const lines = response.split('\n');
        let currentSection = null;
        let currentContent = [];

        for (const line of lines) {
            const trimmedLine = line.trim();
            
            if (trimmedLine.startsWith('## ')) {
                // Sauvegarder la section pr√©c√©dente
                if (currentSection && currentContent.length > 0) {
                    sections[currentSection] = currentContent.join('\n').trim();
                }
                
                // Commencer une nouvelle section
                currentSection = trimmedLine.replace('## ', '').toLowerCase().replace(/\s+/g, '_');
                currentContent = [];
            } else if (currentSection && trimmedLine) {
                currentContent.push(trimmedLine);
            }
        }
        
        // Sauvegarder la derni√®re section
        if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
        }

        console.log('üìä Sections pars√©es:', sections);
        
        // Si aucune section n'a √©t√© trouv√©e, cr√©er un fallback
        if (Object.keys(sections).length === 0) {
            console.log('‚ö†Ô∏è Aucune section trouv√©e, cr√©ation d\'un fallback');
            return {
                'probl√®me': 'Contenu g√©n√©r√© par l\'IA disponible ci-dessous.',
                'solution': response.substring(0, 300) + '...',
                'client_cible': 'Voir le contenu complet g√©n√©r√© par l\'IA.',
                'proposition_de_valeur': 'Pitch g√©n√©r√© avec succ√®s.',
                'canaux_de_distribution': 'Voir analyse compl√®te.',
                'mod√®le_√©conomique': 'D√©tails dans le contenu g√©n√©r√©.',
                'avantage_concurrentiel': 'Voir recommandations IA.',
                'm√©triques_cl√©s': 'Analyse disponible dans le contenu.'
            };
        }

        return sections;
    }

    displayPitch(pitch) {
        const pitchContent = document.getElementById('pitchContent');
        const sectionConfigs = [
            { key: 'probl√®me', title: 'Probl√®me identifi√©', icon: 'üéØ' },
            { key: 'solution', title: 'Solution propos√©e', icon: 'üí°' },
            { key: 'client_cible', title: 'Client cible', icon: 'üë•' },
            { key: 'proposition_de_valeur', title: 'Proposition de valeur', icon: '‚≠ê' },
            { key: 'canaux_de_distribution', title: 'Canaux de distribution', icon: 'üì¢' },
            { key: 'mod√®le_√©conomique', title: 'Mod√®le √©conomique', icon: 'üí∞' },
            { key: 'avantage_concurrentiel', title: 'Avantage concurrentiel', icon: 'üèÜ' },
            { key: 'm√©triques_cl√©s', title: 'M√©triques cl√©s', icon: 'üìä' }
        ];

        let html = '';
        
        for (const config of sectionConfigs) {
            const content = pitch[config.key] || pitch[config.key.replace('_', ' ')] || 'Contenu non disponible';
            html += `
                <div class="pitch-section">
                    <h3>${config.icon} ${config.title}</h3>
                    <p>${this.formatContent(content)}</p>
                </div>
            `;
        }

        // Ajouter la section de r√©ponse compl√®te
        html += `
            <div class="pitch-section full-response" style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #eee;">
                <h3>üìù R√©ponse compl√®te</h3>
                <div style="white-space: pre-wrap; font-family: inherit; line-height: 1.6;">
                    ${pitch.raw_response || 'R√©ponse compl√®te non disponible'}
                </div>
            </div>
        `;

        pitchContent.innerHTML = html;
        this.showResult();
    }

    formatContent(content) {
        // Convertir les listes √† puces si d√©tect√©es
        if (content.includes('‚Ä¢') || content.includes('-')) {
            const lines = content.split('\n');
            let formatted = '';
            let inList = false;
            
            for (const line of lines) {
                const trimmed = line.trim();
                if (trimmed.startsWith('‚Ä¢') || trimmed.startsWith('-')) {
                    if (!inList) {
                        formatted += '<ul>';
                        inList = true;
                    }
                    formatted += `<li>${trimmed.substring(1).trim()}</li>`;
                } else {
                    if (inList) {
                        formatted += '</ul>';
                        inList = false;
                    }
                    if (trimmed) {
                        formatted += `<p>${trimmed}</p>`;
                    }
                }
            }
            
            if (inList) {
                formatted += '</ul>';
            }
            
            return formatted;
        }
        
        return content.replace(/\n/g, '<br>');
    }

    showResult() {
        document.getElementById('formSection').classList.add('hidden');
        document.getElementById('resultSection').classList.remove('hidden');
        
        // Scroll vers le r√©sultat
        document.getElementById('resultSection').scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }

    editPitch() {
        document.getElementById('resultSection').classList.add('hidden');
        document.getElementById('formSection').classList.remove('hidden');
        
        // Scroll vers le formulaire
        document.getElementById('formSection').scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }

    async sharePitch() {
        if (!this.currentPitch) return;

        const pitchText = this.generateShareText();
        
        if (navigator.share) {
            try {
                await navigator.share({
                    title: 'Mon Pitch Business',
                    text: pitchText,
                });
            } catch (error) {
                this.fallbackShare(pitchText);
            }
        } else {
            this.fallbackShare(pitchText);
        }
    }

    fallbackShare(text) {
        navigator.clipboard.writeText(text).then(() => {
            alert('‚úÖ Pitch copi√© dans le presse-papiers !');
        }).catch(() => {
            // Fallback pour navigateurs plus anciens
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                document.execCommand('copy');
                alert('‚úÖ Pitch copi√© dans le presse-papiers !');
            } catch (err) {
                alert('‚ùå Impossible de copier le texte. Veuillez le s√©lectionner manuellement.');
            }
            document.body.removeChild(textArea);
        });
    }

    generateShareText() {
        if (!this.currentPitch) return '';
        
        let text = 'üöÄ MON PITCH BUSINESS\n\n';
        
        const sections = [
            { key: 'probl√®me', title: 'üéØ PROBL√àME' },
            { key: 'solution', title: 'üí° SOLUTION' },
            { key: 'client_cible', title: 'üë• CLIENT CIBLE' },
            { key: 'proposition_de_valeur', title: '‚≠ê PROPOSITION DE VALEUR' }
        ];

        for (const section of sections) {
            const content = this.currentPitch[section.key] || this.currentPitch[section.key.replace('_', ' ')];
            if (content) {
                text += `${section.title}\n${content}\n\n`;
            }
        }
        
        text += '---\nG√©n√©r√© avec Pitch Generator IA';
        
        return text;
    }

    exportToPDF() {
        if (!this.currentPitch) return;

        try {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Configuration
            const pageWidth = doc.internal.pageSize.getWidth();
            const margin = 20;
            const maxWidth = pageWidth - 2 * margin;
            let yPosition = 30;
            
            // Titre
            doc.setFontSize(24);
            doc.setFont(undefined, 'bold');
            doc.text('PITCH BUSINESS', margin, yPosition);
            yPosition += 20;
            
            // Date
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            doc.text(`G√©n√©r√© le: ${new Date().toLocaleDateString('fr-FR')}`, margin, yPosition);
            yPosition += 20;

            // Sections
            const sections = [
                { key: 'probl√®me', title: 'PROBL√àME IDENTIFI√â', icon: 'üéØ' },
                { key: 'solution', title: 'SOLUTION PROPOS√âE', icon: 'üí°' },
                { key: 'client_cible', title: 'CLIENT CIBLE', icon: 'üë•' },
                { key: 'proposition_de_valeur', title: 'PROPOSITION DE VALEUR', icon: '‚≠ê' },
                { key: 'canaux_de_distribution', title: 'CANAUX DE DISTRIBUTION', icon: 'üì¢' },
                { key: 'mod√®le_√©conomique', title: 'MOD√àLE √âCONOMIQUE', icon: 'üí∞' },
                { key: 'avantage_concurrentiel', title: 'AVANTAGE CONCURRENTIEL', icon: 'üèÜ' },
                { key: 'm√©triques_cl√©s', title: 'M√âTRIQUES CL√âS', icon: 'üìä' }
            ];

            for (const section of sections) {
                const content = this.currentPitch[section.key] || this.currentPitch[section.key.replace('_', ' ')];
                if (content) {
                    // V√©rifier si on a assez de place
                    if (yPosition > 250) {
                        doc.addPage();
                        yPosition = 30;
                    }
                    
                    // Titre de section
                    doc.setFontSize(14);
                    doc.setFont(undefined, 'bold');
                    doc.text(`${section.icon} ${section.title}`, margin, yPosition);
                    yPosition += 10;
                    
                    // Contenu
                    doc.setFontSize(11);
                    doc.setFont(undefined, 'normal');
                    const cleanContent = content.replace(/<[^>]*>/g, '').replace(/\n/g, ' ');
                    const lines = doc.splitTextToSize(cleanContent, maxWidth);
                    
                    for (const line of lines) {
                        if (yPosition > 270) {
                            doc.addPage();
                            yPosition = 30;
                        }
                        doc.text(line, margin, yPosition);
                        yPosition += 7;
                    }
                    yPosition += 10;
                }
            }
            
            // Footer
            const totalPages = doc.internal.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
                doc.setPage(i);
                doc.setFontSize(8);
                doc.text(
                    'G√©n√©r√© avec Pitch Generator IA',
                    margin,
                    doc.internal.pageSize.getHeight() - 10
                );
                doc.text(
                    `Page ${i} sur ${totalPages}`,
                    pageWidth - margin - 30,
                    doc.internal.pageSize.getHeight() - 10
                );
            }
            
            // T√©l√©charger
            const fileName = `pitch-business-${new Date().toISOString().split('T')[0]}.pdf`;
            doc.save(fileName);
            
        } catch (error) {
            console.error('Erreur lors de l\'export PDF:', error);
            alert('‚ùå Erreur lors de l\'export PDF. Veuillez r√©essayer.');
        }
    }

    showLoading(show) {
        const btnText = document.getElementById('btnText');
        const loader = document.getElementById('loader');
        const generateBtn = document.getElementById('generateBtn');
        
        if (show) {
            btnText.textContent = 'G√©n√©ration en cours...';
            loader.classList.remove('hidden');
            generateBtn.disabled = true;
        } else {
            btnText.textContent = 'G√©n√©rer mon pitch';
            loader.classList.add('hidden');
            generateBtn.disabled = false;
        }
    }

    showError(message = null) {
        const errorElement = document.getElementById('errorMessage');
        if (message) {
            errorElement.innerHTML = `<p>‚ö†Ô∏è ${message}</p>`;
        }
        errorElement.classList.remove('hidden');
        setTimeout(() => {
            this.hideError();
        }, 8000);
    }

    hideError() {
        document.getElementById('errorMessage').classList.add('hidden');
    }

    generateTestPitch() {
        console.log('üß™ G√©n√©ration d\'un pitch de test');
        
        const formData = this.getFormData();
        if (!this.validateForm(formData)) {
            return;
        }

        this.showLoading(true);
        
        // Simuler un d√©lai d'API
        setTimeout(() => {
            const testPitch = {
                'probl√®me': `Le march√© cibl√© (${formData.targetMarket}) fait face √† des d√©fis significatifs qui ne sont pas correctement adress√©s par les solutions actuelles. Ces probl√®mes cr√©ent des frustrations et des inefficacit√©s.`,
                'solution': `Notre solution "${formData.projectIdea}" propose une approche innovante qui r√©sout directement ces probl√®mes gr√¢ce √† une technologie moderne et une exp√©rience utilisateur optimis√©e.`,
                'client_cible': `Notre segment principal comprend ${formData.targetMarket}, caract√©ris√©s par leurs besoins sp√©cifiques et leur volont√© d'adopter des solutions innovantes.`,
                'proposition_de_valeur': `${formData.competition} Cette diff√©renciation nous permet de cr√©er une valeur unique et d'√©tablir un avantage concurrentiel durable.`,
                'canaux_de_distribution': 'Applications mobiles, plateformes web, partenariats strat√©giques, marketing digital cibl√©, et recommandations clients.',
                'mod√®le_√©conomique': `${formData.businessModel} Ce mod√®le assure une croissance durable et une rentabilit√© √† long terme.`,
                'avantage_concurrentiel': `${formData.competition} Cette approche unique nous positionne favorablement face √† la concurrence existante.`,
                'm√©triques_cl√©s': 'Acquisition clients, taux de r√©tention, revenus r√©currents mensuels (MRR), satisfaction client (NPS), et part de march√©.'
            };
            
            this.displayPitch(testPitch);
            this.currentPitch = testPitch;
            this.showLoading(false);
            
            console.log('‚úÖ Pitch de test g√©n√©r√© avec succ√®s');
        }, 2000);
    }
}

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', () => {
    new PitchGenerator();
});

// Gestion des erreurs globales
window.addEventListener('error', (event) => {
    console.error('Erreur JavaScript:', event.error);
});

// Service Worker pour PWA (optionnel)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js').then((registration) => {
            console.log('SW registered: ', registration);
        }).catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
        });
    });
}